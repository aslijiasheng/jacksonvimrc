;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     expede
     (auto-completion :variables
                      auto-completion-return-key-behavior 'complete
                      auto-completion-tab-key-behavior 'cycle
                      auto-completion-complete-with-key-sequence nil
                      auto-completion-complete-with-key-sequence-delay 0.1
                      auto-completion-private-snippets-directory nil)
     better-defaults
     highlight-indentation
     emacs-lisp
     evil-snipe
     markdown
     org
     ;; (shell :variables
     ;;        shell-default-height 30
     ;;        shell-default-position 'bottom)
     spell-checking
     syntax-checking
     version-control
     autohotkey
     extra-langs
     clojure
     colors
     company
     auto-completion
     c-c++
     erlang
     elixir
     emacs-lisp
     go
     html
     rcirc
     javascript
     racket
     scala
     git
     github
     version-control
     react
     ;; ocaml
     osx
     auctex
     themes-megapack
     purescript
     rust
     sql
     shell
     syntax-checking
     ;;evil-snipe
     ruby
     ruby-on-rails
     purescript
     perspectives
     xkcd
     php
     ibuffer
     restclient
     dockerfile
     chinese
     lua
     dash
     cscope
     python
     yaml
     json
     gtags
     emacs-quickrun
     tabbar
     (haskell :variables
              haskell-enable-ghc-mod-support t
              haskell-enable-ghci-ng-support t
              haskell-enable-shm-support     t)
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '(auto-complete
                                      company-ghc
                                      ghc
                                      quickrun
                                      ac-js2
                                      tern-auto-complete)
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'. (default t)
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; One of `vim', `emacs' or `hybrid'. Evil is always enabled but if the
   ;; variable is `emacs' then the `holy-mode' is enabled at startup. `hybrid'
   ;; uses emacs key bindings for vim's insert mode, but otherwise leaves evil
   ;; unchanged. (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner '000
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'.
   ;; (default '(recents projects))
   dotspacemacs-startup-lists '(recents projects)
   ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   ;; derivatives. If set to `relative', also turns on relative line numbers.
   ;; (default nil)
   dotspacemacs-line-numbers t
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(solarized-dark
                         spacemacs-light
                         spacemacs-dark
                         solarized-light
                         monokai
                         jbeans
                         material
                         subatomic
                         toxi
                         atom-dark-theme
                         leuven
                         monokai
                         zenburn)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :height 165
                               :size   13
                               :weight normal
                               :width  normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m)
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ";"
   ;; If non nil `Y' is remapped to `y$'. (default t)
   dotspacemacs-remap-Y-to-y$ t
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; If non nil then `ido' replaces `helm' for some commands. For now only
   ;; `find-files' (SPC f f), `find-spacemacs-file' (SPC f e s), and
   ;; `find-contrib-file' (SPC f e c) are replaced. (default nil)
   dotspacemacs-use-ido nil
   ;; If non nil, `helm' will try to miminimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-micro-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup t
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native t
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup t
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil advises quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository 'all
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init'.  You are free to put any
user code."

  ;; Use emacs 24.4 desktop save mode
  ;; Restores buffer and frames on emacs start to the previous configuration
  ;; restores buffer file and emacs configuration 此配置会恢复buffer中所有文件以及配置
  ;; (desktop-save-mode t)

  (add-to-list 'exec-path "~/.cabal/bin/")
  (setq-default
    ;; js2-mode
    js2-basic-offset 2
    js-indent-level 2
    ;; web-mode
    css-indent-offset 2
    web-mode-markup-indent-offset 2
    web-mode-css-indent-offset 2
    web-mode-code-indent-offset 2
    web-mode-attr-indent-offset 2)
  (setq tab-width 4)
  (setq ac-js2-evaluate-calls t)
  (setq projectile-switch-project-action 'neotree-projectile-action)
  (setq neo-smart-open t)
  (setq-default indent-tabs-mode nil)
  (setq-default git-magit-status-fullscreen t)
  ;; don't use fish in emacs shells
  (setq explicit-shell-file-name "/bin/zsh")
  (setq shell-file-name "/bin/zsh")
  )


(defun dotspacemacs/user-config ()
  "Configuration function for user code.
 This function is called at the very end of Spacemacs initialization after
layers configuration. You are free to put any user code."
  (global-auto-complete-mode)
  ;; (global-set-key "L" 'evil-end-of-line)
  ;;restore keymap 重新定义按键
  (define-key evil-motion-state-map "L" 'evil-end-of-line)
  (define-key evil-motion-state-map "H" 'evil-first-non-blank)
  (define-key evil-motion-state-map "t" 'tabbar-forward-tab)
  ;; (spacemacs/toggle-indent-guide-globally-on)


  ;;========robect
  "This is were you can ultimately override default Spacemacs configuration.
This function is called at the very end of Spacemacs initialization."
  ;; use same OS X key configurations
  (setq mac-command-modifier 'meta mac-option-modifier nil)
  (setq evil-want-fine-undo nil)
  ;; Sane cursor and window movements
  (setq scroll-preserve-screen-position 1
        smooth-scroll-margin 3
        scroll-margin 4)
  ;; not needed (just visual select the line) and interferes with shm-mode
  (global-hl-line-mode 1)

  (use-package golden-ratio
    :defer t
    :config
    (progn
      (eval-after-load 'golden-ratio
        '(add-to-list 'golden-ratio-exclude-buffer-names
                      "*eshell-1*"))
      ))

  (use-package company
    :defer t
    :init
    (progn
      (setq company-frontends '(company-pseudo-tooltip-frontend
                                company-echo-metadata-frontend))))

  ;; disable helm for some commands
  ;; (use-package helm
  ;;   :defer t
  ;;   :config
  ;;   (progn
  ;;     (add-to-list 'helm-completing-read-handlers-alist '(describe-variable . ido))
  ;;     (add-to-list 'helm-completing-read-handlers-alist '(TeX-command-master . ido))
  ;;     ))

  ;; get these buffers out of the way!
  (push '("*GHC Info*" :noselect t) popwin:special-display-config)
  (push '("*Warnings*" :noselect t) popwin:special-display-config)

  (when (configuration-layer/layer-usedp 'syntax-checking)
    (setq-default flycheck-disabled-checkers '(haskell-ghc javascript-jshint)))

  (when (configuration-layer/layer-usedp 'auto-completion)
    (use-package scss-mode
      :defer t
      :init
      (progn
        (add-hook 'scss-mode 'turn-on-smartparens-mode)
        )
      )
    )

  ;; haskell config
  (use-package haskell-mode
    :defer t
    :init
    (progn
      (evil-define-key 'normal haskell-mode-map ")" 'shm/close-paren)
      (evil-define-key 'insert haskell-mode-map (kbd "RET") 'shm/newline-indent)
      ;; (evil-leader/set-key-for-mode 'haskell-mode
        ;; "mht" 'ide-backend-mode-type
        ;; "mt" 'ide-backend-mode-type ;; mht is really not that nice to type.
        ;; "ml" 'ide-backend-mode-load))
    ;; :config
    ;; (progn
    ;;   (add-hook 'haskell-mode-hook 'custom-haskell-mode-hook)
    ;;   (require 'ide-backend-mode)
    ;;   (require 'company-ide-backend)
    ;;   (add-hook 'haskell-mode-hook 'ide-backend-mode)
    ;;   (spacemacs|add-company-hook haskell-mode)
    ;;   (push '(company-ide-backend) company-backends-haskell-mode)
    ;;   (when (configuration-layer/layer-usedp 'syntax-checking)
    ;;     (require 'flycheck-ide-backend)
    ;;     (flycheck-ide-backend-setup)
    ;;     )
      ))
  ;; latex
  (use-package tex
    :defer t
    :config (progn
              (add-hook 'LaTeX-mode-hook 'custom-latex-mode-hook)
              (progn
                (require 'texmathp)
                (evil-define-key
                  'visual LaTeX-mode-map (kbd "gw") 'LaTeX-fill-region)
                (push '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t :help "Run latexmk on file")
                      TeX-command-list)
                (setq TeX-auto-save t
                      TeX-parse-self t
                      reftex-toc-split-windows-horizontally t
                      reftex-toc-split-windows-fraction 0.35
                      font-latex-fontify-script nil
                      font-latex-fontify-sectioning 'color
                      TeX-view-program-selection
                      '((output-pdf "PDF Viewer"))
                      TeX-view-program-list
                      '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
                (setq-default TeX-master nil TeX-PDF-mode t)
                (evil-set-initial-state 'reftex-toc-mode 'normal))))
  ;;========robect
  ;; (global-company-mode)
  (golden-ratio-mode 1)
  ;;(whitespace-mode 1)
  ;; (crosshairs-mode 1)
  ;; auto-complete-mode
  (setq undo-tree-auto-save-history t
        undo-tree-history-directory-alist
        `(("." . ,(concat spacemacs-cache-directory "undo"))))
  (unless (file-exists-p (concat spacemacs-cache-directory "undo"))
    (make-directory (concat spacemacs-cache-directory "undo")))
  ;; Indentation
  ;; (indent-guide-global-mode 1)

  ;; Show 80-column marker
  ;; (define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
  ;; (global-fci-mode 1)

  ;; Haskell
   (setq haskell-font-lock-symbols t)
   (custom-set-variables '(haskell-stylish-on-save t))

  ;; Clojure
   (setq clojure-enable-fancify-symbols t)

  ;; Whitespace & wrapping
  (setq-default truncate-lines t)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Indentation

  ;; Highlighting
  (add-hook 'after-init-hook #'toggle-crosshairs-when-idle 1)
  (add-hook 'after-init-hook #'crosshairs-mode)
  (setq col-highlight-vline-face-flag  t
        col-highlight-face             hl-line-face)

  )

(defun custom-latex-mode-hook ()
  (latex-math-mode)
  (turn-on-smartparens-mode)
  (setq TeX-command-default "latexmk")
  (outline-minor-mode)
  (TeX-source-correlate-mode)
  (auto-fill-mode)
  (flyspell-mode 1)
  )

(defun custom-haskell-mode-hook ()
  "Execute as haskell-mode-hook."
  ;; (subword-mode +1)
  (custom-set-variables
   '(haskell-process-type 'cabal-repl)
   '(haskell-process-args-cabal-repl
     '("--ghc-option=-ferror-spans"))
   '(haskell-notify-p t)
   '(haskell-process-suggest-remove-import-lines t)
   '(haskell-process-auto-import-loaded-modules t)
   '(haskell-process-use-presentation-mode t)
   '(haskell-process-reload-with-fbytecode nil)
   '(haskell-process-path-ghci "ghci-ng")
   '(haskell-process-args-ghci '("-ferror-spans"))
   '(haskell-process-args-cabal-repl
     '("--ghc-option=-ferror-spans"))
   '(haskell-process-generate-tags nil)
   '(haskell-process-log t)
   '(haskell-interactive-mode-eval-pretty nil)
   '(haskell-interactive-mode-eval-mode 'haskell-mode)
   '(shm-use-presentation-mode t)
   '(shm-auto-insert-skeletons t)
   )
  (setq haskell-complete-module-preferred
        '("Data.ByteString"
          "Data.ByteString.Lazy"
          "Data.Conduit"
          "Data.Function"
          "Data.List"
          "Data.Map"
          "Data.Maybe"
          "Data.Monoid"
          "Data.Ord"))
  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.

 '(ahs-case-fold-search nil)
 '(ahs-default-range (quote ahs-range-whole-buffer))
 '(ahs-idle-interval 0.25)
 '(ahs-idle-timer 0 t)
 '(ahs-inhibit-face-list nil)
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   ["#073642" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#657b83"])
 '(company-tooltip-align-annotations t)
 '(compilation-message-face (quote default))
 '(cua-global-mark-cursor-color "#2aa198")
 '(cua-normal-cursor-color "#839496")
 '(cua-overwrite-cursor-color "#b58900")
 '(cua-read-only-cursor-color "#859900")
 '(custom-safe-themes
   (quote
    ("d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "1c57936ffb459ad3de4f2abbc39ef29bfb109eade28405fa72734df1bc252c13" default)))
 '(electric-indent-mode nil)
 '(expand-region-contract-fast-key "V")
 '(expand-region-reset-fast-key "r")
 '(fci-rule-color "#073642" t)
 '(flycheck-disabled-checkers (quote (haskell-ghc javascript-jshint)))
 '(haskell-interactive-mode-eval-mode (quote haskell-mode))
 '(haskell-interactive-mode-eval-pretty nil)
 '(haskell-interactive-popup-error nil t)
 '(haskell-notify-p t)
 '(haskell-process-args-cabal-repl (quote ("--ghc-option=-ferror-spans")))
 '(haskell-process-args-ghci (quote ("-ferror-spans")))
 '(haskell-process-auto-import-loaded-modules t)
 '(haskell-process-generate-tags nil)
 '(haskell-process-log t)
 '(haskell-process-path-ghci "ghci-ng")
 '(haskell-process-reload-with-fbytecode nil)
 '(haskell-process-suggest-remove-import-lines t)
 '(haskell-process-type (quote cabal-repl))
 '(haskell-process-use-presentation-mode t)
 '(haskell-stylish-on-save nil)
 '(haskell-tags-on-save t)
 '(highlight-changes-colors (quote ("#d33682" "#6c71c4")))
 '(highlight-symbol-colors
   (--map
    (solarized-color-blend it "#002b36" 0.25)
    (quote
     ("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2"))))
 '(highlight-symbol-foreground-color "#93a1a1")
 '(highlight-tail-colors
   (quote
    (("#073642" . 0)
     ("#546E00" . 20)
     ("#00736F" . 30)
     ("#00629D" . 50)
     ("#7B6000" . 60)
     ("#8B2C02" . 70)
     ("#93115C" . 85)
     ("#073642" . 100))))
 '(hl-bg-colors
   (quote
    ("#7B6000" "#8B2C02" "#990A1B" "#93115C" "#3F4D91" "#00629D" "#00736F" "#546E00")))
 '(hl-fg-colors
   (quote
    ("#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36")))
 '(js2-basic-offset 2 t)
 '(js2-include-node-externs t)
 '(magit-diff-use-overlays nil)
 '(magit-use-overlays nil)
 '(pos-tip-background-color "#073642")
 '(pos-tip-foreground-color "#93a1a1")
 '(ring-bell-function (quote ignore) t)
 '(safe-local-variable-values
   (quote
    ((haskell-process-use-ghci . t)
     (haskell-indent-spaces . 4))))
 '(scala-indent:align-forms t)
 '(scala-indent:align-parameters t)
 '(scala-indent:default-run-on-strategy scala-indent:operator-strategy)
 '(shm-auto-insert-skeletons t)
 '(shm-use-presentation-mode t)
 '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#073642" 0.2))
 '(term-default-bg-color "#002b36")
 '(term-default-fg-color "#839496")
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#dc322f")
     (40 . "#c85d17")
     (60 . "#be730b")
     (80 . "#b58900")
     (100 . "#a58e00")
     (120 . "#9d9100")
     (140 . "#959300")
     (160 . "#8d9600")
     (180 . "#859900")
     (200 . "#669b32")
     (220 . "#579d4c")
     (240 . "#489e65")
     (260 . "#399f7e")
     (280 . "#2aa198")
     (300 . "#2898af")
     (320 . "#2793ba")
     (340 . "#268fc6")
     (360 . "#268bd2"))))
 '(vc-annotate-very-old-color nil)
 '(weechat-color-list
   (quote
    (unspecified "#002b36" "#073642" "#990A1B" "#dc322f" "#546E00" "#859900" "#7B6000" "#b58900" "#00629D" "#268bd2" "#93115C" "#d33682" "#00736F" "#2aa198" "#839496" "#657b83"))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
